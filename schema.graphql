type Budget {
  Expend: [Expend!]!
  code: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type BudgetOnCountingItem {
  budget: Budget!
  countingItem: CountingItem!
  id: ID!
}

type BudgetOnCustomCountingItemTerm {
  budget: Budget!
  createdAt: DateTime!
  customCountingItemTerm: CustomCountingItemTerm!
  id: ID!
  updatedAt: DateTime!
}

type Category {
  Expend: [Expend!]!
  code: String!
  createdAt: DateTime!
  id: ID!
  limit: Int!
  name: String!
  updatedAt: DateTime!
}

type CategoryOnCustomCountingItemTerm {
  category: Category!
  createdAt: DateTime!
  customCountingItemTerm: CustomCountingItemTerm!
  id: ID!
  updatedAt: DateTime!
}

type CountingItem {
  budgets: [BudgetOnCountingItem!]!
  code: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  payers: [PayerOnCountingItem!]!
  paymentMethods: [PaymentMethodOnCountingItem!]!
  processed: [Boolean!]!
  updatedAt: DateTime!
}

type CustomCountingItem {
  code: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  terms: [CustomCountingItemTerm!]!
  updatedAt: DateTime!
}

type CustomCountingItemTerm {
  CustomCountingItem: CustomCountingItem!
  budgets: [BudgetOnCustomCountingItemTerm!]!
  categories: [CategoryOnCustomCountingItemTerm!]!
  coefficient: Float!
  id: ID!
  payers: [PayerOnCustomCountingItemTerm!]!
  paymentMethods: [PaymentMethodOnCustomCountingItemTerm!]!
  processed: [Boolean!]!
  sign: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Expend {
  budget: Budget!
  budgetId: Int!
  category: Category!
  categoryId: Int!
  createdAt: DateTime!
  date: String!
  description: String!
  id: ID!
  payer: Payer!
  payerId: Int!
  paymentMethod: PaymentMethod!
  paymentMethodId: Int!
  price: Int!
  processed: Boolean!
  updatedAt: DateTime!
}

type Mutation {
  createExpend(budgetId: Int!, categoryId: Int!, date: String!, description: String!, payerId: Int!, paymentMethodId: Int!, price: Int!, processed: Boolean!): Expend!
  deleteExpend(id: Int!): Expend!
  updateExpend(date: String!, description: String!, id: Int!): Expend!
}

type Payer {
  Expend: [Expend!]!
  PaymentMethod: [PaymentMethod!]!
  code: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type PayerOnCountingItem {
  countingItem: CountingItem!
  id: ID!
  payer: Payer!
}

type PayerOnCustomCountingItemTerm {
  createdAt: DateTime!
  customCountingItemTerm: CustomCountingItemTerm!
  id: ID!
  payer: Payer!
  updatedAt: DateTime!
}

type PaymentMethod {
  Expend: [Expend!]!
  code: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  payer: Payer!
  payerId: Int!
  updatedAt: DateTime!
}

type PaymentMethodOnCountingItem {
  countingItem: CountingItem!
  id: ID!
  paymentMethod: PaymentMethod!
}

type PaymentMethodOnCustomCountingItemTerm {
  createdAt: DateTime!
  customCountingItemTerm: CustomCountingItemTerm!
  id: ID!
  paymentMethod: PaymentMethod!
  updatedAt: DateTime!
}

type Query {
  budgets: [Budget!]!
  categories: [Category!]!
  countingItem: [CountingItem!]!
  customCountingItem: [CustomCountingItem!]!
  expends(yearMonth: String): [Expend!]!
  ok: Boolean!
  payers: [Payer!]!
  paymentMethods: [PaymentMethod!]!
}